"""This file was auto-generated by sqlsynthgen but can be edited manually."""
from mimesis import Generic
from mimesis.locales import Locale
from sqlsynthgen.base import FileUploader

generic = Generic(locale=Locale.EN_GB)

from sqlsynthgen.providers import BytesProvider

generic.add_provider(BytesProvider)
from sqlsynthgen.providers import ColumnValueProvider

generic.add_provider(ColumnValueProvider)
from sqlsynthgen.providers import TimedeltaProvider

generic.add_provider(TimedeltaProvider)
from sqlsynthgen.providers import TimespanProvider

generic.add_provider(TimespanProvider)
from sqlsynthgen.providers import WeightedBooleanProvider

generic.add_provider(WeightedBooleanProvider)

import orm


class countriesGenerator:
    num_rows_per_pass = 1

    def __init__(self, src_db_conn, dst_db_conn):
        self.country_destination = generic.person.password()
        self.lat_destination = generic.numeric.float_number()
        self.lng_destination = generic.numeric.float_number()
        self.distance_km = generic.numeric.float_number()
        self.destination_km2 = generic.numeric.integer_number()
        self.destination_language = generic.text.color()
        self.language_levenshtein_distance = generic.numeric.float_number()


class age_gender_bktsGenerator:
    num_rows_per_pass = 1

    def __init__(self, src_db_conn, dst_db_conn):
        self.age_bucket = generic.person.password()
        self.country_destination = ColumnValueProvider().column_value(
            dst_db_conn, orm.Countries, "country_destination"
        )
        self.gender = generic.person.password()
        self.population_in_thousands = generic.numeric.integer_number()
        self.year = generic.numeric.integer_number()


class usersGenerator:
    num_rows_per_pass = 1

    def __init__(self, src_db_conn, dst_db_conn):
        pass
        self.id = generic.person.password()
        self.date_account_created = generic.datetime.date()
        self.timestamp_first_active = generic.datetime.datetime()
        self.date_first_booking = generic.datetime.date()
        self.gender = generic.text.color()
        self.age = generic.numeric.integer_number()
        self.signup_method = generic.text.color()
        self.signup_flow = generic.numeric.integer_number()
        self.language = generic.text.color()
        self.affiliate_channel = generic.text.color()
        self.affiliate_provider = generic.text.color()
        self.first_affiliate_tracked = generic.text.color()
        self.signup_app = generic.text.color()
        self.first_device_type = generic.text.color()
        self.first_browser = generic.text.color()
        self.country_destination = generic.column_value_provider.column_value(
            dst_db_conn, orm.Countries, "country_destination"
        )


class sessionsGenerator:
    num_rows_per_pass = 1

    def __init__(self, src_db_conn, dst_db_conn):
        pass
        self.user_id = generic.column_value_provider.column_value(
            dst_db_conn, orm.Users, "id"
        )
        self.action = generic.text.color()
        self.action_type = generic.text.color()
        self.action_detail = generic.text.color()
        self.device_type = generic.text.color()
        self.secs_elapsed = generic.numeric.float_number()


table_generator_dict = {
    "countries": countriesGenerator,
    "age_gender_bkts": age_gender_bktsGenerator,
    "users": usersGenerator,
    "sessions": sessionsGenerator,
}


vocab_dict = {}


story_generator_list = []
