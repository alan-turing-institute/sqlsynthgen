--
-- PostgreSQL database dump
--

-- Dumped from database version 14.2 (Debian 14.2-1.pgdg110+1)
-- Dumped by pg_dump version 14.6 (Homebrew)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

DROP DATABASE IF EXISTS dst WITH (FORCE);
--
-- Name: dst; Type: DATABASE; Schema: -; Owner: postgres
--

CREATE DATABASE dst WITH TEMPLATE = template0 ENCODING = 'UTF8' LOCALE = 'en_US.utf8';


ALTER DATABASE dst OWNER TO postgres;

\connect dst

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;


-- One table, called unignorable_table, should be created here to mirror the one in
-- src.dump. This mimics a situation where some vocabulary table is already present in
-- the destination db, and thus we want SSG to ignore it (not copy it over again). It's
-- called "unignorable" because there's a foreign key reference to it, which means we
-- can't ignore it when creating orm.py like we usually do when `ignore: true`, but
-- rather have to handle the ignore at a later stage.

--
-- Name: unignorable_table; Type: TABLE; Schema: dstschema; Owner: postgres
--

create schema dstschema;

CREATE TABLE dstschema.unignorable_table (
    id integer NOT NULL
);

ALTER TABLE dstschema.unignorable_table OWNER TO postgres;

--
-- Name: unignorable_table_id_seq; Type: SEQUENCE; Schema: dstschema; Owner: postgres
--

CREATE SEQUENCE dstschema.unignorable_table_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dstschema.unignorable_table_id_seq OWNER TO postgres;

--
-- Name: unignorable_table_id_seq; Type: SEQUENCE OWNED BY; Schema: dstschema; Owner: postgres
--

ALTER SEQUENCE dstschema.unignorable_table_id_seq OWNED BY dstschema.unignorable_table.id;

--
-- Name: unignorable_table unignorable_table_pkey; Type: CONSTRAINT; Schema: dstschema; Owner: postgres
--

ALTER TABLE ONLY dstschema.unignorable_table
    ADD CONSTRAINT unignorable_table_pkey PRIMARY KEY (id);

--
-- Name: unignorable_table unignorable_table_id; Type: DEFAULT; Schema: dstschema; Owner: postgres
--

ALTER TABLE ONLY dstschema.unignorable_table ALTER COLUMN id SET DEFAULT nextval('dstschema.unignorable_table_id_seq'::regclass);

--
-- Data for Name: unignorable_table; Type: TABLE DATA; Schema: dstschema; Owner: postgres
--

INSERT INTO dstschema.unignorable_table VALUES (1);

--
-- Name: unignorable_table_id_seq; Type: SEQUENCE SET; Schema: dstschema; Owner: postgres
--

SELECT pg_catalog.setval('dstschema.unignorable_table_id_seq', 2, false);
