"""Entrypoint for the sqlsynthgen package."""
import importlib
from typing import Any, Final

from sqlalchemy import create_engine, insert
from sqlalchemy.sql import sqltypes

from sqlsynthgen.settings import get_settings

# TODO Fix the below imports
from tests.examples.example_tables import metadata
from tests.examples.expected_output import sorted_generators as test_generators

# from sqlsynthgen.star import AdvanceDecision, metadata
# from sqlsynthgen.star_gens import AdvanceDecisionGenerator


def main() -> None:
    """Create an empty schema and populate it with dummy data."""

    settings = get_settings()
    engine = create_engine(settings.postgres_dsn)
    populate(engine)
    # metadata.create_all(bind=engine)


def populate(engine: Any) -> None:
    """Populate a database schema with dummy data."""
    # for table in metadata.sorted_tables:
    # print(dir(table))
    # print(table.name)
    # print(table.columns[0].type)
    # return

    for table, generator in zip(metadata.sorted_tables, test_generators):
        with engine.connect() as conn:
            stmt = insert(table).values(generator(conn).__dict__)
            conn.execute(stmt)


def create_generators_from_tables(tables_module_name: str) -> str:
    """Creates sqlsynthgen generator classes from a sqlacodegen-generated file.

    Args:
      tables_module_name: The name of a sqlacodegen-generated module
        as you would provide to importlib.import_module.

    Returns:
      A string that is a valid Python module, once written to file.
    """

    new_content = (
        '"""This file was auto-generated by sqlsynthgen but can be edited manually."""\n'
        "from mimesis import Generic\n"
        "from mimesis.locales import Locale\n"
        "from sqlsynthgen.foreign_key_provider import ForeignKeyProvider\n\n"
        "generic = Generic(locale=Locale.EN)\n"
        "generic.add_provider(ForeignKeyProvider)\n"
    )
    sorted_generators = "[\n"
    indentation: Final[str] = "    "

    sql_to_mimesis_map = {
        sqltypes.BigInteger: "generic.numeric.integer_number()",
        sqltypes.Boolean: "generic.development.boolean()",
        sqltypes.DateTime: "generic.datetime.datetime()",
        sqltypes.Integer: "generic.numeric.integer_number()",
        sqltypes.Text: "generic.text.color()",
    }

    tables_module = importlib.import_module(tables_module_name)
    for table in tables_module.metadata.sorted_tables:
        # print(f"\n{table.name}")
        new_class_name = table.name + "Generator"
        sorted_generators += indentation + new_class_name + ",\n"
        new_content += (
            "\n\nclass "
            + new_class_name
            + ":\n"
            + indentation
            + "def __init__(self, db_connection):\n"
        )

        for column in table.columns:
            # We presume that primary keys are populated automatically
            if column.primary_key:
                continue

            if column.foreign_keys:
                if len(column.foreign_keys) > 1:
                    raise NotImplementedError("Can't handle multiple foreign keys.")
                fkey = column.foreign_keys.pop()
                fk_column_path = fkey.target_fullname
                fk_schema, fk_table, fk_column = fk_column_path.split(".")
                new_content += (
                    f"{indentation*2}self.{column.name} = "
                    f"generic.foreign_key_provider.key(db_connection, "
                    f'"{fk_schema}", "{fk_table}", "{fk_column}"'
                    ")\n"
                )
            else:

                new_content += (
                    indentation * 2
                    + "self."
                    + column.name
                    + " = "
                    + sql_to_mimesis_map.get(type(column.type), "-1")
                    + "\n"
                )
            # print(column)

    sorted_generators += "]"

    new_content += "\n\n" + "sorted_generators = " + sorted_generators + "\n"

    return new_content


if __name__ == "__main__":
    # main()
    create_generators_from_tables("sqlsynthgen.star")
